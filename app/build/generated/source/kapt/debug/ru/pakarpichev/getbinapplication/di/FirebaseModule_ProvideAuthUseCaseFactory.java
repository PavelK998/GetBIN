// Generated by Dagger (https://dagger.dev).
package ru.pakarpichev.getbinapplication.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import ru.pakarpichev.getbinapplication.domain.repository.AuthRepository;
import ru.pakarpichev.getbinapplication.domain.usecases.AuthUseCase;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FirebaseModule_ProvideAuthUseCaseFactory implements Factory<AuthUseCase> {
  private final Provider<AuthRepository> authRepositoryProvider;

  public FirebaseModule_ProvideAuthUseCaseFactory(Provider<AuthRepository> authRepositoryProvider) {
    this.authRepositoryProvider = authRepositoryProvider;
  }

  @Override
  public AuthUseCase get() {
    return provideAuthUseCase(authRepositoryProvider.get());
  }

  public static FirebaseModule_ProvideAuthUseCaseFactory create(
      Provider<AuthRepository> authRepositoryProvider) {
    return new FirebaseModule_ProvideAuthUseCaseFactory(authRepositoryProvider);
  }

  public static AuthUseCase provideAuthUseCase(AuthRepository authRepository) {
    return Preconditions.checkNotNullFromProvides(FirebaseModule.INSTANCE.provideAuthUseCase(authRepository));
  }
}
