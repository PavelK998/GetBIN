// Generated by Dagger (https://dagger.dev).
package ru.pakarpichev.getbinapplication.di;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import ru.pakarpichev.getbinapplication.data.firebase.AuthRepositoryImpl;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FirebaseModule_ProvideAuthRepositoryFactory implements Factory<AuthRepositoryImpl> {
  private final Provider<FirebaseAuth> firebaseAuthProvider;

  private final Provider<FirebaseFirestore> firebaseFirestoreProvider;

  public FirebaseModule_ProvideAuthRepositoryFactory(Provider<FirebaseAuth> firebaseAuthProvider,
      Provider<FirebaseFirestore> firebaseFirestoreProvider) {
    this.firebaseAuthProvider = firebaseAuthProvider;
    this.firebaseFirestoreProvider = firebaseFirestoreProvider;
  }

  @Override
  public AuthRepositoryImpl get() {
    return provideAuthRepository(firebaseAuthProvider.get(), firebaseFirestoreProvider.get());
  }

  public static FirebaseModule_ProvideAuthRepositoryFactory create(
      Provider<FirebaseAuth> firebaseAuthProvider,
      Provider<FirebaseFirestore> firebaseFirestoreProvider) {
    return new FirebaseModule_ProvideAuthRepositoryFactory(firebaseAuthProvider, firebaseFirestoreProvider);
  }

  public static AuthRepositoryImpl provideAuthRepository(FirebaseAuth firebaseAuth,
      FirebaseFirestore firebaseFirestore) {
    return Preconditions.checkNotNullFromProvides(FirebaseModule.INSTANCE.provideAuthRepository(firebaseAuth, firebaseFirestore));
  }
}
