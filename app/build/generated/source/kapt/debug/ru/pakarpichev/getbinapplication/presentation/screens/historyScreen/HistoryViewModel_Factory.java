// Generated by Dagger (https://dagger.dev).
package ru.pakarpichev.getbinapplication.presentation.screens.historyScreen;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import ru.pakarpichev.getbinapplication.domain.usecases.DeleteDataUseCase;
import ru.pakarpichev.getbinapplication.domain.usecases.GetAllDataUseCase;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class HistoryViewModel_Factory implements Factory<HistoryViewModel> {
  private final Provider<GetAllDataUseCase> getAllDataUseCaseProvider;

  private final Provider<DeleteDataUseCase> deleteDataUseCaseProvider;

  public HistoryViewModel_Factory(Provider<GetAllDataUseCase> getAllDataUseCaseProvider,
      Provider<DeleteDataUseCase> deleteDataUseCaseProvider) {
    this.getAllDataUseCaseProvider = getAllDataUseCaseProvider;
    this.deleteDataUseCaseProvider = deleteDataUseCaseProvider;
  }

  @Override
  public HistoryViewModel get() {
    return newInstance(getAllDataUseCaseProvider.get(), deleteDataUseCaseProvider.get());
  }

  public static HistoryViewModel_Factory create(
      Provider<GetAllDataUseCase> getAllDataUseCaseProvider,
      Provider<DeleteDataUseCase> deleteDataUseCaseProvider) {
    return new HistoryViewModel_Factory(getAllDataUseCaseProvider, deleteDataUseCaseProvider);
  }

  public static HistoryViewModel newInstance(GetAllDataUseCase getAllDataUseCase,
      DeleteDataUseCase deleteDataUseCase) {
    return new HistoryViewModel(getAllDataUseCase, deleteDataUseCase);
  }
}
